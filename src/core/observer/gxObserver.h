#ifndef gxObserver_h
#define gxObserver_h

/** @file gxObserver.h */

/** @brief A macro to declare the observer class.
 *
 * This is needed as member function pointers require the class name, and we'd
 * like to save programmers typing it with each subscribe request.
 * So instead of:
 *
 *     aObserver->gxSubscribe( evDummy, Observer::OnDummy )
 * We will write:
 *
 *     aObserver->gxSubscribe( evDummy, OnDummy )
 *
 * Example usage:
 *
 *     class SomeObserver {
 *     private:
 *         gxDeclareObserver( SomeObserver )
 *     }
 */
#define gxDeclareObserver( aClassName ) \
    typedef aClassName ObserverClassName;

/** A macro to call the event-specific subscribe method that was generated by
  * #gxImpSubscribe(). This macro also injects the calling object (the observer)
  * reference.
  *
  * **Note:** In order for this macro to work, the observer class must use the
  * gxDeclareObserver() macro.
  *
  * Example usage:
  *
  *     aObserver->gxSubscribe( evSizeChanged, OnSizeChanged )
  */
#define gxSubscribe( aEvent, aDelegate )\
    aEvent##Subscribe( fastdelegate::MakeDelegate( this, &ObserverClassName::aDelegate ) )

/** A macro to call the event-specific unsubscribe method that was generated by
 * #gxImpUnsubscribe(). Also injects the callers reference.
 *
 * Example usage:
 *
 *     aObserver->gxUnsubscribe( evSizeChanged )
 */
#define gxUnsubscribe( aEvent ) \
    aEvent##Unsubscribe( this )

#endif
